<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DP-Antuit" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImlUb2xhY2N4eGszWmg4NmgxOW15c0FYUUp0VUVCelQwUXNLUjc1M0luRU0ifQ.eyJpc3MiOiJodHRwczovL2FudHVpdGJ0b2MuYjJjbG9naW4uY29tL2Y1NTkzYmU4LTI2MDMtNGIyYy04NGI2LWFhN2E5Yjg2ZGMwMC92Mi4wLyIsImV4cCI6MTY2NzkyNjMzMSwibmJmIjoxNjY3OTIyNzMxLCJhdWQiOiJkMGU1ZTk4OC1iYjI0LTRiMzQtOWRmZi0zY2QwZWFmYTZlZTEiLCJzdWIiOiI3MmQ2YmFiNC0zZWJlLTQwMjAtYTA5Ny0xNWRlMmYxY2ViZWYiLCJlbWFpbCI6ImZhcmtoYWQueWFraHNoaWJhZXZAYW50dWl0LmFpIiwib2lkIjoiNzJkNmJhYjQtM2ViZS00MDIwLWEwOTctMTVkZTJmMWNlYmVmIiwibmFtZSI6IkZhcmtoYWQgWWFraHNoaWJhZXYiLCJpZHAiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vZjU1OTNiZTgtMjYwMy00YjJjLTg0YjYtYWE3YTliODZkYzAwL3YyLjAiLCJlbWFpbHMiOlsiZmFya2hhZC55YWtoc2hpYmFldkBhbnR1aXQuYWkiXSwidGlkIjoiZjU1OTNiZTgtMjYwMy00YjJjLTg0YjYtYWE3YTliODZkYzAwIiwibm9uY2UiOiI2MjIyYzU2NS0xZDBmLTRhNGUtODJmZi1kMDZjYzljYmY2MGUiLCJzY3AiOiJhcGkiLCJhenAiOiJkMGU1ZTk4OC1iYjI0LTRiMzQtOWRmZi0zY2QwZWFmYTZlZTEiLCJ2ZXIiOiIxLjAiLCJpYXQiOjE2Njc5MjI3MzF9.EVV5geOexZKoimJ7OpWk3AvZIBouVGJE2xPcrqcW9vjS4SkAusqHTCrjhYjFVlNhdjwQ1x7DPWWAG8xANkFEVlS5Wtf-9X-Cp4jV5NOEa0u78QNMSNX4t7zVHa0XlY-0eCpwqceV-_4COWp-_2z5iuHy8PMX7Gwt8jqPCX4edYO88Y5i18yJeJUbdRSpev_VPcFA9hkc5KnXW8n_OQm__1mMrvOoWU6f9oDjP45LJ8fKzdw7z0Uwj9dYT1RISlzDcKH1MSBQK3yIs3Kgykimf3_Y051gG7grOF4s45iB0KZ7wlDDbHnz14QlFmdJ77PoRuYvbejxQqAuTYPYHM_CgQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="dpConfig.csv Config" enabled="true">
        <stringProp name="filename">${filePath}dpConfig.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">datasetID,workbookId,templateId,dpDatbase,db_username,isDbcheck,name_ip,BASE_URI,PATH,Protocol,applicationUrl</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">vars.put(&quot;dbUsername&quot;,&quot;${db_username}&quot;)</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="filePath" elementType="Argument">
            <stringProp name="Argument.name">filePath</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUsername" elementType="Argument">
            <stringProp name="Argument.name">dbUsername</stringProp>
            <stringProp name="Argument.value">abdulr</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">This is a method where we can declare our variables and use in our tests, content-type is not necessary because it can be added in HTTP Header Manager</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="name_ip" elementType="Argument">
            <stringProp name="Argument.name">name_ip</stringProp>
            <stringProp name="Argument.value">api-s.demo.antuit.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUsername" elementType="Argument">
            <stringProp name="Argument.name">dbUsername</stringProp>
            <stringProp name="Argument.value">abdulr</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URI" elementType="Argument">
            <stringProp name="Argument.name">BASE_URI</stringProp>
            <stringProp name="Argument.value">api-b2c.espdev.antuits.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">https://api-b2c.espdev.antuits.com/ </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Protocol" elementType="Argument">
            <stringProp name="Argument.name">Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filePath" elementType="Argument">
            <stringProp name="Argument.name">filePath</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="applicationUrl" elementType="Argument">
            <stringProp name="Argument.name">applicationUrl</stringProp>
            <stringProp name="Argument.value">https://b2c.espdev.antuits.com/home/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dpDatbase" elementType="Argument">
            <stringProp name="Argument.name">dpDatbase</stringProp>
            <stringProp name="Argument.value">dev_da2_dataset4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isDbcheck" elementType="Argument">
            <stringProp name="Argument.name">isDbcheck</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">This is a method where we can declare our variables and use in our tests, content-type is not necessary because it can be added in HTTP Header Manager</stringProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DP-QA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">connection</stringProp>
          <stringProp name="dbUrl">jdbc:mariadb://singlestore-qa1.qa1.esp.antuit.ai:3306</stringProp>
          <stringProp name="driver">org.mariadb.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Bj3Y4f9nuUr8Ny5k</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUsername}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="userData.csv Config" enabled="true">
          <stringProp name="filename">${filePath}userData.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">scenario_#,access_token,esp_user_token,measureColumnName, measureAggregationColumnName,measureAggregationType, measureColumnName_2, measureAggregationColumnName_2, measureAggregationType_2, measureAggregationColumnName_UPDATE, measureColumnName_UPDATE, measureAggregationColumnName_UPDATE_2, measureColumnName_UPDATE_2</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Dimensions.csv Config" enabled="true">
          <stringProp name="filename">${filePath}Dimensions.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dimension_1, dimension_2, dimension_3, dimensionLevel_1, dimensionId_1</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass dimension data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="productData.csv Config" enabled="true">
          <stringProp name="filename">${filePath}productData.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dimLevelColName_1,dimLevelsId,dimLevelColName_2,dimColNameId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="productCategories.csv Config" enabled="true">
          <stringProp name="filename">${filePath}productCategories.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">product_category_id, alert_type_value, week_range</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ScopeCreation.csv Config" enabled="true">
          <stringProp name="filename">${filePath}ScopeCreation.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">scope_name ,scope_name_update,dimensions,dimension_level_name,level_values,cmpOperator</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value">${access_token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">espusertoken</stringProp>
              <stringProp name="Header.value">${esp_user_token}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Header Manager is used to pass certain information to our API test such as Token, UserName/Password, Content-Type, etc (content-type is neccessary) or pass info from user_defined_variables</stringProp>
        </HeaderManager>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control Center (CC)" enabled="false">
          <stringProp name="TestPlan.comments">All APIs relevant to CC will maintent in this controller</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateScope &apos;${scope_name}&apos;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateScope&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;changes&quot;: [
      {
        &quot;name&quot;: &quot;${scope_name}&quot;,
        &quot;scope&quot;: {
          &quot;dimensionFilters&quot;: [
            {
              &quot;dimensionColumnName&quot;: &quot;${dimensions}&quot;,
              &quot;and&quot;: [
                {
                  &quot;dimensionLevelColumnName&quot;: &quot;${dimension_level_name}&quot;,
                  &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
                  &quot;values&quot;: [
                    &quot;${level_values}&quot;
                  ]
                }
              ]
            }
          ]
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation CreateScope($input: CreateScopeInput!) {\n  daCreateScope(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateScope</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateScope($input: CreateScopeInput!) {
  daCreateScope(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;changes&quot;: [
      {
        &quot;name&quot;: &quot;${scope_name}&quot;,
        &quot;scope&quot;: {
          &quot;dimensionFilters&quot;: [
            {
              &quot;dimensionColumnName&quot;: &quot;${dimensions}&quot;,
              &quot;and&quot;: [
                {
                  &quot;dimensionLevelColumnName&quot;: &quot;${dimension_level_name}&quot;,
                  &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
                  &quot;values&quot;: [
                    &quot;${level_values}&quot;
                  ]
                }
              ]
            }
          ]
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fail_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### fail message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">success_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.daCreateScope</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### success message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1367823412">${success_scope_message}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"> &apos;${scope_name}&apos; ${fail_scope_message}</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">success_response_message</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to pull newly created &apos;${scope_name}&apos; scope" enabled="true">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">select
scope_id,
scope_name
from dev_da2_dataset4.scope_dim_desc sdd 
where scope_name = &apos;${scope_name}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">scope_id,db_scope_name</stringProp>
            <stringProp name="TestPlan.comments">We are validating if created data is in the database</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate if ${scope_name} was created" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-616052624">${scope_name}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message"> Expected Data ${scope_name} Was Not Created...</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">db_scope_name_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="UpdateScope &apos;${scope_name_update}&apos;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdateScope&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;scopeId&quot;: &quot;${scope_id_1}&quot;,
    &quot;changes&quot;: {
      &quot;name&quot;: &quot;${scope_name_update}&quot;,
      &quot;scope&quot;: {
        &quot;dimensionFilters&quot;: [
          {
            &quot;dimensionColumnName&quot;: &quot;${dimensions}&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;${dimension_level_name}&quot;,
                &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
                &quot;values&quot;: [
                  &quot;${level_values}&quot;
                ]
              }
            ]
          }
        ]
      }
    }
  }
},&quot;query&quot;:&quot;mutation UpdateScope($input: UpdateScope!) {\n  daUpdateScope(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">UpdateScope</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation UpdateScope($input: UpdateScope!) {
  daUpdateScope(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;scopeId&quot;: &quot;${scope_id_1}&quot;,
    &quot;changes&quot;: {
      &quot;name&quot;: &quot;${scope_name_update}&quot;,
      &quot;scope&quot;: {
        &quot;dimensionFilters&quot;: [
          {
            &quot;dimensionColumnName&quot;: &quot;${dimensions}&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;${dimension_level_name}&quot;,
                &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
                &quot;values&quot;: [
                  &quot;${level_values}&quot;
                ]
              }
            ]
          }
        ]
      }
    }
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1512101788">${success_update_scope_message}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"> &apos;${scope_name}&apos; ${fail_update_scope_message}</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">success_response_message</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">success_update_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.daUpdateScope</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### success message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fail_update_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### fail message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to pull updated &apos;${scope_name_update}&apos; scope" enabled="true">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">select
scope_id,
scope_name
from dev_da2_dataset4.scope_dim_desc sdd 
where scope_name = &apos;${scope_name_update}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">db_scope_id,db_scope_name_updated</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate if ${scope_name} was created" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1510897730">${scope_name_update}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message"> Expected Data ${scope_name_update} Was Not Created...</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">db_scope_name_updated_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="DeleteScope &apos;${scope_name_update}&apos;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;DeleteScope&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;scopeIds&quot;: [
      &quot;${db_scope_id_1}&quot;
    ]
  }
},&quot;query&quot;:&quot;mutation DeleteScope($input: DeleteScopeInput!) {\n  daDeleteScope(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">DeleteScope</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation DeleteScope($input: DeleteScopeInput!) {
  daDeleteScope(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;scopeIds&quot;: [
      &quot;${db_scope_id_1}&quot;
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">success_delete_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.daDeleteScope</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### success message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fail_delete_scope_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### fail message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1532836674">${success_delete_scope_message}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"> &apos;${scope_name_update}&apos; ${fail_delete_scope_message}</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">success_response_message</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addNewMeasures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addMeasures&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureColumnName&quot;: &quot;${measureColumnName}&quot;,
          &quot;measureAggregationColumnName&quot;: &quot;${measureAggregationColumnName}&quot;,
          &quot;measureAggregationType&quot;: &quot;${measureAggregationType}&quot;
        }
      },
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureColumnName&quot;: &quot;${measureColumnName_2}&quot;,
          &quot;measureAggregationColumnName&quot;: &quot;${measureAggregationColumnName_2}&quot;,
          &quot;measureAggregationType&quot;: &quot;${measureAggregationType_2}&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addMeasures($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addMeasures</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addMeasures($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureColumnName&quot;: &quot;${measureColumnName}&quot;,
          &quot;measureAggregationColumnName&quot;: &quot;${measureAggregationColumnName}&quot;,
          &quot;measureAggregationType&quot;: &quot;${measureAggregationType}&quot;
        }
      },
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureColumnName&quot;: &quot;${measureColumnName_2}&quot;,
          &quot;measureAggregationColumnName&quot;: &quot;${measureAggregationColumnName_2}&quot;,
          &quot;measureAggregationType&quot;: &quot;${measureAggregationType_2}&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.data.daInsertData</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fail_response_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### fail message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">success_response_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.daInsertData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### success message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488682223">${success_response_message_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">${fail_response_message_1}</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">success_response_message</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMeasures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">getMeasures</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query getMeasures($input: DAGetRecordsInput) { daGetRecords(input: $input) { data __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;input&quot;: {
    &quot;datatable&quot;: &quot;measure_aggregations&quot;,
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;sort&quot;: {
      &quot;sortEntries&quot;: [
        {
          &quot;columnName&quot;: &quot;measure_aggregation_column_name&quot;,
          &quot;isAscending&quot;: true
        }
      ]
    },
    &quot;datasetID&quot;: 4
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMeasures</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMeasures($input: DAGetRecordsInput) {
  daGetRecords(input: $input) {
    data
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datatable&quot;: &quot;measure_aggregations&quot;,
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;sort&quot;: {
      &quot;sortEntries&quot;: [
        {
          &quot;columnName&quot;: &quot;measure_aggregation_column_name&quot;,
          &quot;isAscending&quot;: true
        }
      ]
    },
    &quot;datasetID&quot;: 4
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fail_response_message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### fail message not found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1762882165">${measureColumnName}</stringProp>
                <stringProp name="314404577">${measureAggregationColumnName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">${fail_response_message_1}</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to pull newly added measures" enabled="true">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">select
measure_aggregation_id,
measure_aggregation_column_name,
measure_aggregation_type,
measure_id
from dev_da2_dataset4.measure_aggregations
where measure_aggregation_column_name in (&apos;${measureAggregationColumnName}&apos;, &apos;${measureAggregationColumnName_2}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">measure_aggregation_id, measure_aggregation_column_name, measure_aggregation_type, measure_id</stringProp>
            <stringProp name="TestPlan.comments">We are validating if created data is in the database</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate New Measure_1 Was Successfully Added" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="314404577">${measureAggregationColumnName}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName} Was Not Created ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate New Measure_2 Was Successfully Added" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1495060622">${measureAggregationColumnName_2}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName_2} Was Not Created ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_2</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="UpdateMeasures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addMeasures&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_1}&quot;,
          &quot;measureAggregationType&quot;: &quot;BASE_ONLY&quot;,
          &quot;measureId&quot;: &quot;${measure_id_1}&quot;,
          &quot;measureAggregationColumnName&quot;:&quot;${measureAggregationColumnName_UPDATE}&quot;,
          &quot;measureColumnName&quot;:&quot;${measureColumnName_UPDATE}&quot;
        }
      },
       {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_2}&quot;,
          &quot;measureAggregationType&quot;: &quot;BASE_ONLY&quot;,
          &quot;measureId&quot;: &quot;${measure_id_2}&quot;,
          &quot;measureAggregationColumnName&quot;:&quot;${measureAggregationColumnName_UPDATE_2}&quot;,
          &quot;measureColumnName&quot;:&quot;${measureColumnName_UPDATE_2}&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addMeasures($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addMeasures</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addMeasures($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_1}&quot;,
          &quot;measureAggregationType&quot;: &quot;BASE_ONLY&quot;,
          &quot;measureId&quot;: &quot;${measure_id_1}&quot;,
          &quot;measureAggregationColumnName&quot;:&quot;${measureAggregationColumnName_UPDATE}&quot;,
          &quot;measureColumnName&quot;:&quot;${measureColumnName_UPDATE}&quot;
        }
      },
       {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_2}&quot;,
          &quot;measureAggregationType&quot;: &quot;BASE_ONLY&quot;,
          &quot;measureId&quot;: &quot;${measure_id_2}&quot;,
          &quot;measureAggregationColumnName&quot;:&quot;${measureAggregationColumnName_UPDATE_2}&quot;,
          &quot;measureColumnName&quot;:&quot;${measureColumnName_UPDATE_2}&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
              <stringProp name="DurationAssertion.duration">100</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.daInsertData</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="deleteMeasures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;deleteMeasures&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_2}&quot;
        }
      },
        {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_1}&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation deleteMeasures($input: DeleteDataInput!) {\n  daDeleteData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">deleteMeasures</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation deleteMeasures($input: DeleteDataInput!) {
  daDeleteData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_2}&quot;
        }
      },
        {
        &quot;datatable&quot;: [&quot;measures&quot;, &quot;measure_aggregations&quot;, &quot;measure_aggregation_dependencies&quot;],
        &quot;type&quot;: &quot;MEASURE&quot;,
        &quot;measureData&quot;: {
          &quot;measureAggregationId&quot;: &quot;${measure_aggregation_id_1}&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.daDeleteData</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to validate deletion" enabled="true">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">select
measure_aggregation_id,
measure_aggregation_column_name,
measure_aggregation_type,
measure_id
from dev_da2_dataset4.measure_aggregations
where measure_aggregation_column_name in (&apos;${measureAggregationColumnName}&apos;, &apos;${measureAggregationColumnName_2}&apos;)
or measure_aggregation_column_name in (&apos;${measureAggregationColumnName_UPDATE}&apos;, &apos;${measureAggregationColumnName_UPDATE_2}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">measure_aggregation_id, measure_aggregation_column_name, measure_aggregation_type, measure_id</stringProp>
            <stringProp name="TestPlan.comments">Validate if newly created value was removed successfully</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Measure_1 Was Successfully Deleted" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="314404577">${measureAggregationColumnName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName} Was Not DELETED OR There Is Nothing To Delete ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Measure_2 Was Successfully Deleted" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1495060622">${measureAggregationColumnName_2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName_2} Was Not DELETED OR There Is Nothing To Delete ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_2</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Update_Measure_1 Was Successfully Deleted" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-851284815">${measureAggregationColumnName_UPDATE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName_UPDATE} Was Not DELETED OR There Is Nothing To Delete ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Update_Measure_2 Was Successfully Deleted" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040948130">${measureAggregationColumnName_UPDATE_2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data ${measureAggregationColumnName_UPDATE_2} Was Not DELETED OR There Is Nothing To Delete ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_2</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demand Planning (DP)" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open DP Application, Navigate on Alert" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserConfiguration" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserConfiguration&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getUserConfiguration {\n  userConfiguration {\n    user {\n      userId\n      firstName\n      lastName\n      email\n      locale\n      defaultApp\n      appAlerts\n      espUserToken\n      applications {\n        applicationId\n        applicationName\n        configJson\n        i18n\n        __typename\n      }\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getUserConfiguration</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getUserConfiguration {
  userConfiguration {
    user {
      userId
      firstName
      lastName
      email
      locale
      defaultApp
      appAlerts
      espUserToken
      applications {
        applicationId
        applicationName
        configJson
        i18n
        __typename
      }
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">User configuration API calling when DP application open, scope is null</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCloneWorkbooks" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCloneWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;mutation addUserAuditLogs($applicationName: String!, $applicationUrl: String!, $eventType: String!, $dataSource: String!) {\n  addUserAuditLogs(\n    input: {applicationName: $applicationName, applicationUrl: $applicationUrl, eventType: $eventType, dataSource: $dataSource}\n  )\nquery getCloneWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getCloneWorkbooks</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation addUserAuditLogs($applicationName: String!, $applicationUrl: String!, $eventType: String!, $dataSource: String!) {
  addUserAuditLogs(
    input: {applicationName: $applicationName, applicationUrl: $applicationUrl, eventType: $eventType, dataSource: $dataSource}
  )
query getCloneWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Calling while launching application, scope is datasetID</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addUserAuditLogs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addUserAuditLogs&quot;,&quot;variables&quot;:{
  &quot;applicationName&quot;: &quot;home&quot;,
  &quot;applicationUrl&quot;: &quot;${applicationUrl}&quot;,
  &quot;eventType&quot;: &quot;login&quot;,
  &quot;dataSource&quot;: &quot;Table&quot;
},&quot;query&quot;:&quot;mutation addUserAuditLogs($applicationName: String!, $applicationUrl: String!, $eventType: String!, $dataSource: String!) {\n  addUserAuditLogs(\n    input: {applicationName: $applicationName, applicationUrl: $applicationUrl, eventType: $eventType, dataSource: $dataSource}\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">addUserAuditLogs</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation addUserAuditLogs($applicationName: String!, $applicationUrl: String!, $eventType: String!, $dataSource: String!) {
  addUserAuditLogs(
    input: {applicationName: $applicationName, applicationUrl: $applicationUrl, eventType: $eventType, dataSource: $dataSource}
  )
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;applicationName&quot;: &quot;home&quot;,
  &quot;applicationUrl&quot;: &quot;${applicationUrl}&quot;,
  &quot;eventType&quot;: &quot;login&quot;,
  &quot;dataSource&quot;: &quot;Table&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Calling on everu user action, scope is applicationUrl</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDashboardsWorkbooks" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDashboardsWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getDashboardsWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getDashboardsWorkbooks</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getDashboardsWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Calling while launching DP application, scope is datasetid</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbookByID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbookByID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getWorkbookByID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getWorkbookByID</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getWorkbookByID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getPlannerFlagType" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPlannerFlagType&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
},&quot;query&quot;:&quot;query getPlannerFlagType($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getPlannerFlagType</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getPlannerFlagType($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getStatusOptions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatusOptions&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getStatusOptions($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getStatusOptions</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getStatusOptions($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbooksByScopeID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbooksByScopeID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getWorkbooksByScopeID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getWorkbooksByScopeID</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getWorkbooksByScopeID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="filterData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;filterData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;:  ${datasetID},
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query filterData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">filterData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query filterData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;:  ${datasetID},
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetchTimeData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
},&quot;query&quot;:&quot;query fetchTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">fetchTimeData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query fetchTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getReasonCodesForWorkbook" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReasonCodesForWorkbook&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;6&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getReasonCodesForWorkbook</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;6&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_pillsData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_location_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_pillsData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query fetch_location_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_product_pillsData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_product_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_product_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">fetch_product_pillsData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query fetch_product_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_user_pillsData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_user_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_user_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">fetch_user_pillsData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query fetch_user_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDefaultFilter" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDefaultFilter&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getDefaultFilter {\n  daSavedFilterByFilterId(\n    input: {filterId: 0, datasetID: 4, workbookId: 6, templateId: 6, datatable: \&quot;user_filters\&quot;}\n  ) {\n    filterId\n    filterName\n    filterJsonWithName\n    filterJson\n    defaultFlag\n    aggregatedValues\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getDefaultFilter</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getDefaultFilter {
  daSavedFilterByFilterId(
    input: {filterId: 0, datasetID: 4, workbookId: 6, templateId: 6, datatable: &quot;user_filters&quot;}
  ) {
    filterId
    filterName
    filterJsonWithName
    filterJson
    defaultFlag
    aggregatedValues
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAlertTypeData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAlertTypeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;alert_fact&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;alert_type&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;alert_type&quot;,
          &quot;direction&quot;: &quot;DESC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAlertTypeData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getAlertTypeData</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getAlertTypeData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;alert_fact&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;alert_type&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;alert_type&quot;,
          &quot;direction&quot;: &quot;DESC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">5000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">success_response_message</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Alert summary data without Applied filter" enabled="true">
              <stringProp name="TestPlan.comments">Fetching alert summary data without applying global filter</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_alerts_summary_data without applied filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_alerts_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_alerts_summary_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Fetching alert summary data without applying global filter</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Alert Tab" enabled="false"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filter Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlertTabGlobalFilters.csvConfig" enabled="true">
                <stringProp name="filename">${filePath}AlertTabGlobalFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">GlobalDimensionLevels,GlobalDimensionColumnName,GlobalDimensionLevelColumnName,GlobalCmpOperator,GlobaldimensionLevel_id,alert_type_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_alerts_summary_data using &apos;${GlobalDimensionColumnName}&apos; filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_alerts_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${GlobalDimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${GlobalDimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${GlobalCmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${GlobaldimensionLevel_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_alerts_summary_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${GlobalDimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${GlobalDimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${GlobalCmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${GlobaldimensionLevel_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Any variables passed to this script come from globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getAlertrowcount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message">### Response code not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Scope.variable">totalCount_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">check each request response time in &lt;=5sec</stringProp>
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; alert_fact" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	(COUNT (DISTINCT af.location_id)) AS count_stores,
	(COUNT (DISTINCT af.product_id)) AS count_items,
	SUM(crr_accmlt_frcst) AS sum_crr_accmlt_frcst,
	SUM(accmlt_sls_lag3) AS sum_accmlt_sls_lag3,
	SUM(accmlt_sls_lag3_ly) AS sum_accmlt_sls_lag3_ly,
	SUM(prv_accmlt_frcst) AS sum_prv_accmlt_frcst,
	SUM(accmlt_abse_lag3) AS sum_accmlt_abse_lag3,
	SUM(accmlt_se_lag3) AS sum_accmlt_se_lag3,
	SUM(ssis_ratio) AS sum_ssis_x_sales,
	SUM(fva_err) AS sum_fva_err,
	SUM(fva_accmlt_sls) AS sum_fva_accmlt_sls,
	( COUNT( if(af.alert_status_name = &apos;Completed&apos;, 1, NULL) ) ) AS count_completed,
	( COUNT( if( af.alert_status_name = &apos;In progress&apos;, 1, NULL ) ) ) AS count_in_progress,
	( COUNT( if( af.alert_status_name = &apos;Not started&apos;, 1, NULL ) ) ) AS count_not_started,
	((COUNT(1))) AS count_alerts
FROM
	${dpDatbase}.alert_fact af,
	${dpDatbase}.product_dim_xref pdx
WHERE
	af.product_id = pdx.product_id
	AND pdx.${GlobalDimensionLevelColumnName}_id NOT IN (&apos;${GlobaldimensionLevel_id}&apos;)
	and af.alert_type_id IN (&apos;${alert_type_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	od.opstudy_name AS opstudy_name,
	od.opstudy_description AS opstudy_description,
	od.opstudy_external_id AS opstudy_external_id,
	count_stores,
	count_items,
	( abs( (sum_crr_accmlt_frcst - sum_prv_accmlt_frcst) / sum_prv_accmlt_frcst ) ) AS stability_alerts,
	(sum_ssis_x_sales / sum_accmlt_sls_lag3) AS agg_ssis_ratio,
	(sum_accmlt_se_lag3 * 100 / sum_accmlt_sls_lag3) AS bias,
	(sum_fva_err * 100 / sum_fva_accmlt_sls) AS sum_fva,
	(sum_accmlt_abse_lag3 * 100 / sum_accmlt_sls_lag3) AS mape,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	( ( CASE
		WHEN count_not_started = count_alerts THEN &apos;Not started&apos;
		WHEN count_completed = count_alerts THEN &apos;Completed&apos;
		WHEN count_in_progress &lt;= count_alerts THEN &apos;In progress&apos;
	END ) ) AS alert_status,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc od
WHERE
	t.opstudy_id = od.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_prv_accmlt_frcst,
	sum_accmlt_abse_lag3,
	sum_accmlt_se_lag3,
	sum_ssis_x_sales,
	sum_fva_err,
	sum_fva_accmlt_sls,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	count_stores,
	count_items,
	count_completed,
	count_in_progress,
	count_not_started,
	count_alerts
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come   ${filePath}globleFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-527520053">${getAlertrowcount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; alert_fact" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	(COUNT (DISTINCT af.location_id)) AS count_stores,
	(COUNT (DISTINCT af.product_id)) AS count_items,
	SUM(crr_accmlt_frcst) AS sum_crr_accmlt_frcst,
	SUM(accmlt_sls_lag3) AS sum_accmlt_sls_lag3,
	SUM(accmlt_sls_lag3_ly) AS sum_accmlt_sls_lag3_ly,
	SUM(prv_accmlt_frcst) AS sum_prv_accmlt_frcst,
	SUM(accmlt_abse_lag3) AS sum_accmlt_abse_lag3,
	SUM(accmlt_se_lag3) AS sum_accmlt_se_lag3,
	SUM(ssis_ratio) AS sum_ssis_x_sales,
	SUM(fva_err) AS sum_fva_err,
	SUM(fva_accmlt_sls) AS sum_fva_accmlt_sls,
	( COUNT( if(af.alert_status_name = &apos;Completed&apos;, 1, NULL) ) ) AS count_completed,
	( COUNT( if( af.alert_status_name = &apos;In progress&apos;, 1, NULL ) ) ) AS count_in_progress,
	( COUNT( if( af.alert_status_name = &apos;Not started&apos;, 1, NULL ) ) ) AS count_not_started,
	((COUNT(1))) AS count_alerts
FROM
	${dpDatbase}.alert_fact af,
	${dpDatbase}.product_dim_xref pdx
WHERE
	af.product_id = pdx.product_id
	AND pdx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobaldimensionLevel_id}&apos;)
	and af.alert_type_id IN (&apos;${alert_type_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	od.opstudy_name AS opstudy_name,
	od.opstudy_description AS opstudy_description,
	od.opstudy_external_id AS opstudy_external_id,
	count_stores,
	count_items,
	( abs( (sum_crr_accmlt_frcst - sum_prv_accmlt_frcst) / sum_prv_accmlt_frcst ) ) AS stability_alerts,
	(sum_ssis_x_sales / sum_accmlt_sls_lag3) AS agg_ssis_ratio,
	(sum_accmlt_se_lag3 * 100 / sum_accmlt_sls_lag3) AS bias,
	(sum_fva_err * 100 / sum_fva_accmlt_sls) AS sum_fva,
	(sum_accmlt_abse_lag3 * 100 / sum_accmlt_sls_lag3) AS mape,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	( ( CASE
		WHEN count_not_started = count_alerts THEN &apos;Not started&apos;
		WHEN count_completed = count_alerts THEN &apos;Completed&apos;
		WHEN count_in_progress &lt;= count_alerts THEN &apos;In progress&apos;
	END ) ) AS alert_status,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc od
WHERE
	t.opstudy_id = od.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_prv_accmlt_frcst,
	sum_accmlt_abse_lag3,
	sum_accmlt_se_lag3,
	sum_ssis_x_sales,
	sum_fva_err,
	sum_fva_accmlt_sls,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	count_stores,
	count_items,
	count_completed,
	count_in_progress,
	count_not_started,
	count_alerts
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globleFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-527520053">${getAlertrowcount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; alert_fact" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	(COUNT (DISTINCT af.location_id)) AS count_stores,
	(COUNT (DISTINCT af.product_id)) AS count_items,
	SUM(crr_accmlt_frcst) AS sum_crr_accmlt_frcst,
	SUM(accmlt_sls_lag3) AS sum_accmlt_sls_lag3,
	SUM(accmlt_sls_lag3_ly) AS sum_accmlt_sls_lag3_ly,
	SUM(prv_accmlt_frcst) AS sum_prv_accmlt_frcst,
	SUM(accmlt_abse_lag3) AS sum_accmlt_abse_lag3,
	SUM(accmlt_se_lag3) AS sum_accmlt_se_lag3,
	SUM(ssis_ratio) AS sum_ssis_x_sales,
	SUM(fva_err) AS sum_fva_err,
	SUM(fva_accmlt_sls) AS sum_fva_accmlt_sls,
	( COUNT( if(af.alert_status_name = &apos;Completed&apos;, 1, NULL) ) ) AS count_completed,
	( COUNT( if( af.alert_status_name = &apos;In progress&apos;, 1, NULL ) ) ) AS count_in_progress,
	( COUNT( if( af.alert_status_name = &apos;Not started&apos;, 1, NULL ) ) ) AS count_not_started,
	((COUNT(1))) AS count_alerts
FROM
	${dpDatbase}.alert_fact af,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	af.location_id = ldx.location_id
	AND af.product_id = pdx.product_id
	AND ldx.${GlobalDimensionLevelColumnName}_id NOT IN (&apos;${GlobaldimensionLevel_id}&apos;)
	and af.alert_type_id IN (&apos;${alert_type_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	od.opstudy_name AS opstudy_name,
	od.opstudy_description AS opstudy_description,
	od.opstudy_external_id AS opstudy_external_id,
	count_stores,
	count_items,
	( abs( (sum_crr_accmlt_frcst - sum_prv_accmlt_frcst) / sum_prv_accmlt_frcst ) ) AS stability_alerts,
	(sum_ssis_x_sales / sum_accmlt_sls_lag3) AS agg_ssis_ratio,
	(sum_accmlt_se_lag3 * 100 / sum_accmlt_sls_lag3) AS bias,
	(sum_fva_err * 100 / sum_fva_accmlt_sls) AS sum_fva,
	(sum_accmlt_abse_lag3 * 100 / sum_accmlt_sls_lag3) AS mape,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	( ( CASE
		WHEN count_not_started = count_alerts THEN &apos;Not started&apos;
		WHEN count_completed = count_alerts THEN &apos;Completed&apos;
		WHEN count_in_progress &lt;= count_alerts THEN &apos;In progress&apos;
	END ) ) AS alert_status,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc od
WHERE
	t.opstudy_id = od.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_prv_accmlt_frcst,
	sum_accmlt_abse_lag3,
	sum_accmlt_se_lag3,
	sum_ssis_x_sales,
	sum_fva_err,
	sum_fva_accmlt_sls,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	count_stores,
	count_items,
	count_completed,
	count_in_progress,
	count_not_started,
	count_alerts
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-527520053">${getAlertrowcount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; alert_fact" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	(COUNT (DISTINCT af.location_id)) AS count_stores,
	(COUNT (DISTINCT af.product_id)) AS count_items,
	SUM(crr_accmlt_frcst) AS sum_crr_accmlt_frcst,
	SUM(accmlt_sls_lag3) AS sum_accmlt_sls_lag3,
	SUM(accmlt_sls_lag3_ly) AS sum_accmlt_sls_lag3_ly,
	SUM(prv_accmlt_frcst) AS sum_prv_accmlt_frcst,
	SUM(accmlt_abse_lag3) AS sum_accmlt_abse_lag3,
	SUM(accmlt_se_lag3) AS sum_accmlt_se_lag3,
	SUM(ssis_ratio) AS sum_ssis_x_sales,
	SUM(fva_err) AS sum_fva_err,
	SUM(fva_accmlt_sls) AS sum_fva_accmlt_sls,
	( COUNT( if(af.alert_status_name = &apos;Completed&apos;, 1, NULL) ) ) AS count_completed,
	( COUNT( if( af.alert_status_name = &apos;In progress&apos;, 1, NULL ) ) ) AS count_in_progress,
	( COUNT( if( af.alert_status_name = &apos;Not started&apos;, 1, NULL ) ) ) AS count_not_started,
	((COUNT(1))) AS count_alerts
FROM
	alert_fact af,
	product_dim_xref pdx,
	location_dim_xref ldx
WHERE
	af.location_id = ldx.location_id
	AND af.product_id = pdx.product_id
	AND ldx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobaldimensionLevel_id}&apos;)
	and af.alert_type_id IN (&apos;${alert_type_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	od.opstudy_name AS opstudy_name,
	od.opstudy_description AS opstudy_description,
	od.opstudy_external_id AS opstudy_external_id,
	count_stores,
	count_items,
	( abs( (sum_crr_accmlt_frcst - sum_prv_accmlt_frcst) / sum_prv_accmlt_frcst ) ) AS stability_alerts,
	(sum_ssis_x_sales / sum_accmlt_sls_lag3) AS agg_ssis_ratio,
	(sum_accmlt_se_lag3 * 100 / sum_accmlt_sls_lag3) AS bias,
	(sum_fva_err * 100 / sum_fva_accmlt_sls) AS sum_fva,
	(sum_accmlt_abse_lag3 * 100 / sum_accmlt_sls_lag3) AS mape,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	( ( CASE
		WHEN count_not_started = count_alerts THEN &apos;Not started&apos;
		WHEN count_completed = count_alerts THEN &apos;Completed&apos;
		WHEN count_in_progress &lt;= count_alerts THEN &apos;In progress&apos;
	END ) ) AS alert_status,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc od
WHERE
	t.opstudy_id = od.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_prv_accmlt_frcst,
	sum_accmlt_abse_lag3,
	sum_accmlt_se_lag3,
	sum_ssis_x_sales,
	sum_fva_err,
	sum_fva_accmlt_sls,
	sum_crr_accmlt_frcst,
	sum_accmlt_sls_lag3,
	sum_accmlt_sls_lag3_ly,
	count_stores,
	count_items,
	count_completed,
	count_in_progress,
	count_not_started,
	count_alerts
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-527520053">${getAlertrowcount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Forecast Analysis Tab" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data without applied filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;
    ],
    &quot;scope&quot;: null,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;
    ],
    &quot;scope&quot;: null,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">This will pull everything what is available in the Products dashboard</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">13</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ForeCastAnalysisGlobalFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}ForeCastAnalysisGlobalFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">GlobalDimensionLevels,GlobalDimensionColumnName,GlobalDimensionLevelColumnName,GlobalCmpOperator,GlobalBrand_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using &apos;${GlobalDimensionColumnName}&apos; filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;${GlobalDimensionLevels}&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${GlobalDimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${GlobalDimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${GlobalCmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${GlobalBrand_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;${GlobalDimensionLevels}&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${GlobalDimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${GlobalDimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${GlobalCmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${GlobalBrand_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getRowCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.product_id = pdx.product_id
	AND pdx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobalBrand_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	opstudy_dim_desc.opstudy_name AS opstudy_name,
	opstudy_dim_desc.opstudy_description AS opstudy_description,
	opstudy_dim_desc.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_st_ly,
	(((sum_st_ty - sum_st_ly) / sum_st_ty) * 100) AS st_yoy_perc_change,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc
WHERE
	t.opstudy_id = opstudy_dim_desc.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_st_ty,
	sum_st_ly
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.product_id = pdx.product_id
	AND pdx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobalBrand_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	opstudy_dim_desc.opstudy_name AS opstudy_name,
	opstudy_dim_desc.opstudy_description AS opstudy_description,
	opstudy_dim_desc.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_st_ly,
	(((sum_st_ty - sum_st_ly) / sum_st_ty) * 100) AS st_yoy_perc_change,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc
WHERE
	t.opstudy_id = opstudy_dim_desc.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_st_ty,
	sum_st_ly
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND ldx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobalBrand_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	opstudy_dim_desc.opstudy_name AS opstudy_name,
	opstudy_dim_desc.opstudy_description AS opstudy_description,
	opstudy_dim_desc.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_st_ly,
	(((sum_st_ty - sum_st_ly) / sum_st_ty) * 100) AS st_yoy_perc_change,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc
WHERE
	t.opstudy_id = opstudy_dim_desc.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_st_ty,
	sum_st_ly
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${GlobalCmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${GlobalDimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND ldx.${GlobalDimensionLevelColumnName}_id IN (&apos;${GlobalBrand_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	opstudy_dim_desc.opstudy_name AS opstudy_name,
	opstudy_dim_desc.opstudy_description AS opstudy_description,
	opstudy_dim_desc.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_st_ly,
	(((sum_st_ty - sum_st_ly) / sum_st_ty) * 100) AS st_yoy_perc_change,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc
WHERE
	t.opstudy_id = opstudy_dim_desc.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_st_ty,
	sum_st_ly
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PLN Details" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Complex Filters" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${datasetID}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${datasetID}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_forecast_total_data_without_filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_forecast_total_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_forecast_total_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_forecast_total_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_forecast_total_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data_without_filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PLNDetailsFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}PLNDetailsFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">DimensionLevels,DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_forecast_total_data using ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_forecast_total_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionLevels}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${DimensionLevels}&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_forecast_total_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_forecast_total_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_forecast_total_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionLevels}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${DimensionLevels}&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionLevels}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${DimensionLevels}&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionLevels}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${DimensionLevels}&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getProductrowCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.product_dim_desc pdd,
	${dpDatbase}.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.product_dim_desc pdd,
	${dpDatbase}.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.product_dim_desc pdd,
	${dpDatbase}.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.product_dim_desc pdd,
	${dpDatbase}.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2086344553">${getRowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Store Details" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Complex Filters" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCloneWorkbooks" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCloneWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getCloneWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getCloneWorkbooks</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getCloneWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbookByID" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbookByID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getWorkbookByID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getWorkbookByID</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getWorkbookByID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDashboardsWorkbooks" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDashboardsWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getDashboardsWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getDashboardsWorkbooks</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getDashboardsWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getPlannerFlagType" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPlannerFlagType&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
},&quot;query&quot;:&quot;query getPlannerFlagType($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getPlannerFlagType</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getPlannerFlagType($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getStatusOptions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatusOptions&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getStatusOptions($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getStatusOptions</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getStatusOptions($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbooksByScopeID" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbooksByScopeID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getWorkbooksByScopeID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getWorkbooksByScopeID</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getWorkbooksByScopeID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="filterData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;filterData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query filterData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">filterData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query filterData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetchTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
},&quot;query&quot;:&quot;query fetchTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetchTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetchTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_product_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_product_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_product_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_product_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_product_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_location_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_location_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_user_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_user_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_user_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_user_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_user_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getReasonCodesForWorkbook" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReasonCodesForWorkbook&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;4&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getReasonCodesForWorkbook</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;4&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDefaultFilter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDefaultFilter&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getDefaultFilter {\n  daSavedFilterByFilterId(\n    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: \&quot;user_filters\&quot;}\n  ) {\n    filterId\n    filterName\n    filterJsonWithName\n    filterJson\n    defaultFlag\n    aggregatedValues\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getDefaultFilter</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getDefaultFilter {
  daSavedFilterByFilterId(
    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: &quot;user_filters&quot;}
  ) {
    filterId
    filterName
    filterJsonWithName
    filterJson
    defaultFlag
    aggregatedValues
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 200,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 200,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_total_data_without_filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_total_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_location_total_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_total_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_location_total_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_locations_data_without_filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_locations_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;location&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;planner_tag&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_locations_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_locations_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_locations_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;location&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;planner_tag&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
                <stringProp name="LoopController.loops">15</stringProp>
              </LoopController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="StoreDetailsFilters.csv Config" enabled="true">
                  <stringProp name="filename">${filePath}StoreDetailsFilters.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">DimensionLevels,DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_total_data using ${ProductColumnNameFilter} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_total_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_location_total_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_total_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_location_total_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: null,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: null,
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_locations_data using ${ProductColumnNameFilter} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_locations_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;location&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;planner_tag&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                 &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_locations_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_locations_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_locations_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;location&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;planner_tag&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                 &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">getLocationsrowCount</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                    <stringProp name="Scope.variable"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                      <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                        <stringProp name="dataSource">connection</stringProp>
                        <stringProp name="query">WITH t AS (
SELECT
	ldx.location_id AS location_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count,
	SUM(planner_tag_override) AS sum_planner_tag_override
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo with(row_count = 100,
	selectivity = 0.1) ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.location_dim_xref ldx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	ldx.location_id )
SELECT
	t.location_id AS location_id,
	&apos;location&apos;,
	ldd.location_name AS location_name,
	ldd.location_description AS location_description,
	ldd.location_external_id AS location_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	( CAST( (sum_planner_tag_override / row_count) AS DECIMAL(10, 8) ) ) AS planner_tag,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.location_dim_desc ldd
WHERE
	t.location_id = ldd.location_id
GROUP BY
	t.location_id,
	location_name,
	location_description,
	location_external_id,
	sum_planner_tag_override,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	location_id</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultSetMaxRows"></stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                        <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                      </JDBCSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1381705815">${getLocationsrowCount}</stringProp>
                          </collectionProp>
                          <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                          <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">8</intProp>
                          <stringProp name="Assertion.scope">variable</stringProp>
                          <stringProp name="Scope.variable">totalCount_#</stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                      <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                        <stringProp name="dataSource">connection</stringProp>
                        <stringProp name="query">WITH t AS (
SELECT
	ldx.location_id AS location_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count,
	SUM(planner_tag_override) AS sum_planner_tag_override
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo with(row_count = 100,
	selectivity = 0.1) ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.location_dim_xref ldx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	ldx.location_id )
SELECT
	t.location_id AS location_id,
	&apos;location&apos;,
	ldd.location_name AS location_name,
	ldd.location_description AS location_description,
	ldd.location_external_id AS location_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	( CAST( (sum_planner_tag_override / row_count) AS DECIMAL(10, 8) ) ) AS planner_tag,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.location_dim_desc ldd
WHERE
	t.location_id = ldd.location_id
GROUP BY
	t.location_id,
	location_name,
	location_description,
	location_external_id,
	sum_planner_tag_override,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	location_id</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultSetMaxRows"></stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                        <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                      </JDBCSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1381705815">${getLocationsrowCount}</stringProp>
                          </collectionProp>
                          <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                          <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">8</intProp>
                          <stringProp name="Assertion.scope">variable</stringProp>
                          <stringProp name="Scope.variable">totalCount_#</stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                      <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos;  product_data" enabled="true">
                        <stringProp name="dataSource">connection</stringProp>
                        <stringProp name="query">WITH t AS (
SELECT
	ldx.location_id AS location_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count,
	SUM(planner_tag_override) AS sum_planner_tag_override
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN ${dpDatbase}.fact_override fo with(row_count = 100,
	selectivity = 0.1) ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.location_dim_xref ldx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	ldx.location_id )
SELECT
	t.location_id AS location_id,
	&apos;location&apos;,
	ldd.location_name AS location_name,
	ldd.location_description AS location_description,
	ldd.location_external_id AS location_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	( CAST( (sum_planner_tag_override / row_count) AS DECIMAL(10, 8) ) ) AS planner_tag,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.location_dim_desc ldd
WHERE
	t.location_id = ldd.location_id
GROUP BY
	t.location_id,
	location_name,
	location_description,
	location_external_id,
	sum_planner_tag_override,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	location_id</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultSetMaxRows"></stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                        <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                      </JDBCSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1381705815">${getLocationsrowCount}</stringProp>
                          </collectionProp>
                          <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                          <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">8</intProp>
                          <stringProp name="Assertion.scope">variable</stringProp>
                          <stringProp name="Scope.variable">totalCount_#</stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                      <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos;  product_data" enabled="true">
                        <stringProp name="dataSource">connection</stringProp>
                        <stringProp name="query">WITH t AS (
SELECT
	ldx.location_id AS location_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count,
	SUM(planner_tag_override) AS sum_planner_tag_override
FROM
	${dpDatbase}.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo with(row_count = 100,
	selectivity = 0.1) ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	${dpDatbase}.location_dim_xref ldx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.product_dim_xref pdx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	ldx.location_id )
SELECT
	t.location_id AS location_id,
	&apos;location&apos;,
	ldd.location_name AS location_name,
	ldd.location_description AS location_description,
	ldd.location_external_id AS location_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	( CAST( (sum_planner_tag_override / row_count) AS DECIMAL(10, 8) ) ) AS planner_tag,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.location_dim_desc ldd
WHERE
	t.location_id = ldd.location_id
GROUP BY
	t.location_id,
	location_name,
	location_description,
	location_external_id,
	sum_planner_tag_override,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	location_id</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultSetMaxRows"></stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                        <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                      </JDBCSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1381705815">${getLocationsrowCount}</stringProp>
                          </collectionProp>
                          <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                          <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">8</intProp>
                          <stringProp name="Assertion.scope">variable</stringProp>
                          <stringProp name="Scope.variable">totalCount_#</stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FVA" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Complex Filters" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ComplexFilter.cfg Config" enabled="true">
                <stringProp name="filename">${filePath}ComplexFilterConfig.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">dimensionLevelColumnName,dimensionColumnName,columnName,dimColumnId,cmpOperator,startDate,endDate</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;==&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;==&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;!=&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;!=&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="FVAFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}FVAFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getProductrowCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch  &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
     ${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that &apos;${ProductColumnNameFilter}&apos; are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch  &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Export" enabled="false"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Complex Filters" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ComplexFilter.cfg Config" enabled="true">
                <stringProp name="filename">${filePath}ComplexFilterConfig.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">dimensionLevelColumnName,dimensionColumnName,columnName,dimColumnId,cmpOperator,startDate,endDate</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;==&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;==&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_export_preview_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_export_preview_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;week&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: [],
    &quot;isCountQuery&quot;: true,
    &quot;maxRowsFetchedCount&quot;: 50000
  }
},&quot;query&quot;:&quot;query fetch_export_preview_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_export_preview_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_export_preview_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;week&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: [],
    &quot;isCountQuery&quot;: true,
    &quot;maxRowsFetchedCount&quot;: 50000
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;!=&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;!=&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_export_preview_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_export_preview_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;week&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: [],
    &quot;isCountQuery&quot;: true,
    &quot;maxRowsFetchedCount&quot;: 50000
  }
},&quot;query&quot;:&quot;query fetch_export_preview_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_export_preview_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_export_preview_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;week&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: [],
    &quot;isCountQuery&quot;: true,
    &quot;maxRowsFetchedCount&quot;: 50000
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;season&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;season&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1108602274&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;season&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;season&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1108602274&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCloneWorkbooks" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCloneWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getCloneWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getCloneWorkbooks</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getCloneWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;NEW_ITEM_CLONE&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbookByID" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbookByID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getWorkbookByID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getWorkbookByID</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getWorkbookByID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;workbookID&quot;: &quot;4&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDashboardsWorkbooks" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDashboardsWorkbooks&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getDashboardsWorkbooks($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getDashboardsWorkbooks</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getDashboardsWorkbooks($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;DASHBOARD&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getPlannerFlagType" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPlannerFlagType&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
},&quot;query&quot;:&quot;query getPlannerFlagType($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getPlannerFlagType</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getPlannerFlagType($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;planner_flag_type&quot;
    ],
    &quot;first&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getStatusOptions" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatusOptions&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getStatusOptions($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getStatusOptions</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getStatusOptions($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;alert_status&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getWorkbooksByScopeID" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getWorkbooksByScopeID&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query getWorkbooksByScopeID($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getWorkbooksByScopeID</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getWorkbooksByScopeID($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;user_access_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;workbook&quot;,
      &quot;template&quot;,
      &quot;scope&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;can_write&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;scope&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;scope&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;template&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;template&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;PLANNING_WORKBOOK&quot;
              ],
              &quot;searchDimensionKey&quot;: &quot;external_id&quot;
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="filterData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;filterData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query filterData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">filterData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query filterData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;fact_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetchTimeData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
},&quot;query&quot;:&quot;query fetchTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetchTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetchTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_product_pillsData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_product_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_product_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_product_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_product_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_pillsData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_location_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_location_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_user_pillsData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_user_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query fetch_user_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_user_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_user_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getReasonCodesForWorkbook" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReasonCodesForWorkbook&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;4&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
},&quot;query&quot;:&quot;query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getReasonCodesForWorkbook</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getReasonCodesForWorkbook($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;workbook_reason_code_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;workbook&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;workbook&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;4&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;reason_code&quot;
    ],
    &quot;first&quot;: 20
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDefaultFilter" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDefaultFilter&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getDefaultFilter {\n  daSavedFilterByFilterId(\n    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: \&quot;user_filters\&quot;}\n  ) {\n    filterId\n    filterName\n    filterJsonWithName\n    filterJson\n    defaultFlag\n    aggregatedValues\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getDefaultFilter</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getDefaultFilter {
  daSavedFilterByFilterId(
    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: &quot;user_filters&quot;}
  ) {
    filterId
    filterName
    filterJsonWithName
    filterJson
    defaultFlag
    aggregatedValues
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 200,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;4&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;datasetID&quot;: 4,
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 200,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;4&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;datasetID&quot;: 4,
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData_without_filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData_without_filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ExportFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}ExportFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">getSeasonCategoryDataDimensionLevels,getSeasonDataDimensionLevels,DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData using ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;${getSeasonDataDimensionLevels}&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;${getSeasonDataDimensionLevels}&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;${getSeasonDataDimensionLevels}&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;${getSeasonDataDimensionLevels}&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData using ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;${getSeasonCategoryDataDimensionLevels}&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;${getSeasonCategoryDataDimensionLevels}&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;${getSeasonCategoryDataDimensionLevels}&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;${getSeasonCategoryDataDimensionLevels}&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getProductrowCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simulation" enabled="false"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Complex Filters" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ComplexFilter.cfg Config" enabled="true">
                <stringProp name="filename">${filePath}ComplexFilterConfig.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">dimensionLevelColumnName,dimensionColumnName,columnName,dimColumnId,cmpOperator,startDate,endDate</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;==&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;==&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_promotion_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_promotion_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_promotion_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_promotion_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_promotion_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If not only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;!=&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;!=&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_promotion_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_promotion_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_promotion_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_promotion_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_promotion_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_promotion_data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_promotion_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_promotion_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_promotion_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_promotion_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SimulationFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}SimulationFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;4&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_promotion_data of ${ProductColumnNameFilter} with ${displayNames} filters" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_promotion_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_promotion_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_promotion_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_promotion_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;promo_data&quot;,
      &quot;events_data&quot;,
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;promotion&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;promoid&quot;,
      &quot;start_date&quot;,
      &quot;end_date&quot;,
      &quot;event_description&quot;,
      &quot;market_code&quot;,
      &quot;offer&quot;,
      &quot;ad_retail&quot;,
      &quot;rnd_pct_off&quot;,
      &quot;display_location&quot;,
      &quot;num_products&quot;,
      &quot;num_stores&quot;,
      &quot;st_total_fcst_sc&quot;,
      &quot;st_driver_fcst_sc&quot;,
      &quot;st_base_fcst_sc&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Multi Dimension" enabled="false"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Complex Filters" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ComplexMultiDimFilterConfig.cfg Config" enabled="true">
                <stringProp name="filename">${filePath}ComplexMultiDimFilterConfig.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">dimensionColumnName,dimensionLevelColumnName,cmpOperator,startDateId,dimensionLevelColumnName_range,week_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationColumnData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDateId}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDateId}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDateId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDateId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMeasureAggregationColumnData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMeasureAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${week_id}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetMeasureAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${week_id}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetchTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
},&quot;query&quot;:&quot;query fetchTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetchTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetchTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;first&quot;: 200,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;time_flag&quot;,
      &quot;time_editable&quot;,
      &quot;default_tp&quot;,
      &quot;lag&quot;,
      &quot;latest4&quot;
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_product_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_product_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_product_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_product_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_product_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;product_vendor&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;merchandise_div&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;merchandise_div&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_user_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_user_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_user_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_user_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_user_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;user&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 200,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_location_pillsData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_location_pillsData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query fetch_location_pillsData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_location_pillsData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_location_pillsData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;scope&quot;: null,
    &quot;dimensionLevels&quot;: &quot;region&quot;,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;region&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;search&quot;: null,
    &quot;first&quot;: 30,
    &quot;after&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDefaultFilter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDefaultFilter&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getDefaultFilter {\n  daSavedFilterByFilterId(\n    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: \&quot;user_filters\&quot;}\n  ) {\n    filterId\n    filterName\n    filterJsonWithName\n    filterJson\n    defaultFlag\n    aggregatedValues\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getDefaultFilter</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getDefaultFilter {
  daSavedFilterByFilterId(
    input: {filterId: 0, datasetID: 4, workbookId: 4, templateId: 6, datatable: &quot;user_filters&quot;}
  ) {
    filterId
    filterName
    filterJsonWithName
    filterJson
    defaultFlag
    aggregatedValues
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTimeData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTimeData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
},&quot;query&quot;:&quot;query getTimeData($query: DAQueryInput!) {\n  daDataQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          id\n          uniqueID\n          name\n          description\n          externalID\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getTimeData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getTimeData($query: DAQueryInput!) {
  daDataQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          id
          uniqueID
          name
          description
          externalID
          __typename
        }
        measureValues
        __typename
      }
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;first&quot;: 100,
    &quot;datatable&quot;: &quot;time_data&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;forecast_horizon&quot;
    ],
    &quot;workbookID&quot;: &quot;${workbookID}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;datasetID&quot;: ${datasetID},
    &quot;postAggFilter&quot;: {
      &quot;and&quot;: [
        {
          &quot;measureColumnName&quot;: &quot;forecast_horizon&quot;,
          &quot;operator&quot;: &quot;IN&quot;,
          &quot;value&quot;: [
            &quot;1&quot;
          ]
        }
      ]
    },
    &quot;scope&quot;: null
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMeasureAggregationColumnData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMeasureAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;latest4_next4&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetMeasureAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;latest4_next4&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMeasureAggregationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMeasureAggregationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;latest4_next4&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 90,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetMeasureAggregationData($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetMeasureAggregationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetMeasureAggregationData($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;latest4_next4&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 90,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationColumnData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 70,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 70,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="MultiDimensionFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}MultiDimensionFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,week_range,week_cmId,cmId_Value,dim_name </stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationData of ${ProductColumnNameFilter} with ${displayNames} filters" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 70,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationData($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 70,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        },
        {
          &quot;columnName&quot;: &quot;time&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDimensionAggregationColumnData of ${ProductColumnNameFilter} with ${displayNames} filters" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetDimensionAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetDimensionAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetDimensionAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;week&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;123&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMeasureAggregationColumnData of ${ProductColumnNameFilter} with ${displayNames} filters" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMeasureAggregationColumnData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dim_name}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${week_cmId}&quot;,
              &quot;values&quot;: [
                &quot;${cmId_Value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetMeasureAggregationColumnData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetMeasureAggregationColumnData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;week&quot;
    ],
    &quot;first&quot;: null,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dim_name}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${week_cmId}&quot;,
              &quot;values&quot;: [
                &quot;${cmId_Value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMeasureAggregationData of ${ProductColumnNameFilter} with ${displayNames} filters" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMeasureAggregationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dim_name}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${week_cmId}&quot;,
              &quot;values&quot;: [
                &quot;${cmId_Value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 90,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query GetMeasureAggregationData($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetMeasureAggregationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetMeasureAggregationData($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;,
      &quot;week&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;is_editable&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dim_name}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;${week_cmId}&quot;,
              &quot;values&quot;: [
                &quot;${cmId_Value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 90,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;opstudy&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    }
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1890478328">${getProductrowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${GlobalDimensionLevelColumnName}&apos; product_data" enabled="true">
                    <stringProp name="dataSource">connection</stringProp>
                    <stringProp name="query">WITH t AS (
SELECT
	pdx.product_id AS product_id,
	pdx.brand_id AS brand_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(st_ly) AS sum_st_ly,
	SUM(st_total_fcst) AS sum_st_total_fcst,
	SUM(st_base_fcst) AS sum_st_base_fcst,
	SUM(st_driver_fcst) AS sum_st_driver_fcst,
	SUM(forecast_p1) AS sum_forecast_p1,
	( sum( IF( fo.st_base_override IS NULL, fd.st_base_fcst, fo.st_base_override ) + IF( fo.st_trade_promotions_override IS NULL, IF( fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst ), fo.st_trade_promotions_override ) ) ) AS st_final_plan,
	SUM(st_base_override) AS sum_st_base_override,
	SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
	(COUNT(*)) AS row_count
FROM
	dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON
	fo.product_id = fd.product_id
	and fo.location_id = fd.location_id
	and fo.time_id = fd.time_id
	and fo.version_id = fd.version_id,
	dev_da2_dataset4.product_dim_xref pdx,
	dev_da2_dataset4.time_dim_xref tdx,
	dev_da2_dataset4.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.product_id,
	pdx.brand_id )
SELECT
	t.product_id AS product_id,
	&apos;product&apos;,
	pdd.product_name AS product_name,
	pdd.product_description AS product_description,
	pdd.product_external_id AS product_external_id,
	t.brand_id AS brand_id,
	&apos;brand&apos;,
	bdd.brand_name AS brand_name,
	bdd.brand_description AS brand_description,
	bdd.brand_external_id AS brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	st_final_plan,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	row_count,
	Count(1) over() as totalCount
FROM
	t,
	dev_da2_dataset4.product_dim_desc pdd,
	dev_da2_dataset4.brand_dim_desc bdd
WHERE
	t.product_id = pdd.product_id
	AND t.brand_id = bdd.brand_id
GROUP BY
	t.product_id,
	product_name,
	product_description,
	product_external_id,
	t.brand_id,
	brand_name,
	brand_description,
	brand_external_id,
	sum_st_ty,
	sum_st_ly,
	sum_st_total_fcst,
	sum_st_base_fcst,
	sum_st_driver_fcst,
	sum_forecast_p1,
	sum_st_base_override,
	sum_st_trade_promotions_override,
	st_final_plan,
	row_count
ORDER BY
	product_id</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                    <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2086344553">${getRowCount}</stringProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                      <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">totalCount_#</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setConnectTime((prev.getConnectTime() / 1000) as long)
prev.setLatency((prev.getLatency() / 1000) as long)
org.apache.commons.lang3.reflect.FieldUtils.writeField(prev, &apos;elapsedTime&apos;, (prev.getTime() / 1000).round(2) as long, true)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Old_Scripts" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_alerts_summary_data" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_alerts_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimLevelColName_1}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimLevelColName_2}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimColNameId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">fetch_alerts_summary_data</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimLevelColName_1}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimLevelColName_2}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimColNameId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">product_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..uniqueID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2023535230">${dimLevelsId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getFileConfigTrue" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFileConfig&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;branchName&quot;: &quot;a-vanilla-test&quot;,
    &quot;filePath&quot;: &quot;ui/config/DPi18n.json&quot;,
    &quot;isJsonFile&quot;: true
  }
},&quot;query&quot;:&quot;query getFileConfig($input: GetConfigFileInput) {\n  getConfigFile(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getFileConfig</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getFileConfig($input: GetConfigFileInput) {
  getConfigFile(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;branchName&quot;: &quot;a-vanilla-test&quot;,
    &quot;filePath&quot;: &quot;ui/config/DPi18n.json&quot;,
    &quot;isJsonFile&quot;: true
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-346035524">Covid Non Seasonal</stringProp>
                <stringProp name="1473714792">Supply Issue</stringProp>
                <stringProp name="1939923906">AI Recommendations</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;isCountQuery&quot;: true,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 3000,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;isCountQuery&quot;: true,
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 3000,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;product&quot;,
      &quot;brand&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;sum_forecast_p1&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;110000276&quot;,
                &quot;110000276&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="daGetRecords" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;daGetRecords&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datatable&quot;: &quot;measure_aggregations&quot;,
    &quot;isPaginated&quot;: true,
    &quot;first&quot;: 10,
    &quot;after&quot;: &quot;0&quot;,
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;measure_dimension_conversion&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;datasetID&quot;: &quot;4&quot;,
    &quot;sort&quot;: {
      &quot;sortEntries&quot;: [
        {
          &quot;columnName&quot;: &quot;measure_aggregation_id&quot;,
          &quot;isAscending&quot;: true
        }
      ]
    },
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;measure_aggregation_column_name&quot;,
          &quot;or&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;measure_aggregation_column_name&quot;,
              &quot;cmpOperator&quot;: &quot;LIKE&quot;,
              &quot;values&quot;: [&quot;st_yoy_perc_change&quot;]
            }
          ]
        }
      ]
    }
  }
},&quot;query&quot;:&quot;query daGetRecords($input: DAGetRecordsInput){\n  daGetRecords(input: $input){\n    edges\n    pageInfo{\n      totalRows\n      hasNextPage\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">daGetRecords</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query daGetRecords($input: DAGetRecordsInput){
  daGetRecords(input: $input){
    edges
    pageInfo{
      totalRows
      hasNextPage
    }
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datatable&quot;: &quot;measure_aggregations&quot;,
    &quot;isPaginated&quot;: true,
    &quot;first&quot;: 10,
    &quot;after&quot;: &quot;0&quot;,
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;measure_dimension_conversion&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;datasetID&quot;: &quot;4&quot;,
    &quot;sort&quot;: {
      &quot;sortEntries&quot;: [
        {
          &quot;columnName&quot;: &quot;measure_aggregation_id&quot;,
          &quot;isAscending&quot;: true
        }
      ]
    },
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;measure_aggregation_column_name&quot;,
          &quot;or&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;measure_aggregation_column_name&quot;,
              &quot;cmpOperator&quot;: &quot;LIKE&quot;,
              &quot;values&quot;: [&quot;st_yoy_perc_change&quot;]
            }
          ]
        }
      ]
    }
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addMultipleDimensionAndDimensionLevel" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_2}&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_2}&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create multiple dimensions
</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addMultipleDimensionLevelsForExistingDimension" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;level_six&quot;,
            &quot;level_seven&quot;
          ]
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimensionId&quot;: &quot;${dimensionId_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;l_four&quot;,
            &quot;l_five&quot;
          ]
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;level_six&quot;,
            &quot;level_seven&quot;
          ]
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimensionId&quot;: &quot;${dimensionId_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;l_four&quot;,
            &quot;l_five&quot;
          ]
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create multiple dimension levels for exiting dimensions</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="daGetRecordById" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;daGetRecordById&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datatable&quot;: [&quot;measure_aggregations&quot;, &quot;measures&quot;],
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;measure_dimension_conversion&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;id&quot;: &quot;100&quot;,
    &quot;datasetID&quot;: &quot;4&quot;,
    &quot;idColumnName&quot;: &quot;measure_aggregation_id&quot;
  }
},&quot;query&quot;:&quot;query daGetRecordById($input: DAGetRecordByIdInput){\n  daGetRecordById(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">daGetRecordById</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query daGetRecordById($input: DAGetRecordByIdInput){
  daGetRecordById(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datatable&quot;: [&quot;measure_aggregations&quot;, &quot;measures&quot;],
    &quot;columnNames&quot;: [
      &quot;measure_aggregation_id&quot;,
      &quot;measure_aggregation_column_name&quot;,
      &quot;measure_aggregation_type&quot;,
      &quot;measure_id&quot;,
      &quot;measure_formula&quot;,
      &quot;measure_dimension_conversion&quot;,
      &quot;non_aggregated_measures&quot;,
      &quot;partition_by&quot;,
      &quot;order_by_details&quot;
    ],
    &quot;id&quot;: &quot;100&quot;,
    &quot;datasetID&quot;: &quot;4&quot;,
    &quot;idColumnName&quot;: &quot;measure_aggregation_id&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="daUpdateDimensionData" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;daUpdateDimensionData&quot;,&quot;variables&quot;:{
  &quot;updateDimensionData&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;id&quot;: 9,
        &quot;dimensionName&quot;: &quot;scope&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;scopeName&quot;: &quot;Vendor Specific&quot;,
          &quot;scopeExternalId&quot;: &quot;9&quot;
        }
      },
      {
        &quot;id&quot;: 2,
        &quot;dimensionName&quot;: &quot;template&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;templateName&quot;: &quot;WBA Template&quot;,
          &quot;templateExternalId&quot;: &quot;2&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation daUpdateDimensionData($updateDimensionData: UpdateDimensionInput!) {\n  daUpdateDimension(updates: $updateDimensionData)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">daUpdateDimensionData</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation daUpdateDimensionData($updateDimensionData: UpdateDimensionInput!) {
  daUpdateDimension(updates: $updateDimensionData)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateDimensionData&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;id&quot;: 9,
        &quot;dimensionName&quot;: &quot;scope&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;scopeName&quot;: &quot;Vendor Specific&quot;,
          &quot;scopeExternalId&quot;: &quot;9&quot;
        }
      },
      {
        &quot;id&quot;: 2,
        &quot;dimensionName&quot;: &quot;template&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;templateName&quot;: &quot;WBA Template&quot;,
          &quot;templateExternalId&quot;: &quot;2&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Update Mutation</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addOneDimensionAndDimensionLevel" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create one dimensions</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addOneDimensionLevelToExistingDimension" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;level_four&quot;,
            &quot;level_five&quot;
          ]
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;level_four&quot;,
            &quot;level_five&quot;
          ]
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create one dimension levels for exiting dimensions</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Any variables passed to this script come from ${filePath}productCategories.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Code is not 200... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">dimLevelsId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData_2" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Any variables passed to this script come from ${filePath}productCategories.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Code is not 200... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">dimLevelsId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="daCreateDimensionData" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;daUpdateDimensionData&quot;,&quot;variables&quot;:{
  &quot;updateDimensionData&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;dimensionName&quot;: &quot;scope&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;scopeName&quot;: &quot;Vendor Specific&quot;,
          &quot;scopeExternalId&quot;: &quot;externalId&quot;
        }
      },
      {
        &quot;dimensionName&quot;: &quot;template&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;templateName&quot;: &quot;WBA Template 1&quot;,
          &quot;templateExternalId&quot;: &quot;externalId&quot;
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation daUpdateDimensionData($updateDimensionData: UpdateDimensionInput!) {\n  daUpdateDimension(updates: $updateDimensionData)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">daUpdateDimensionData</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation daUpdateDimensionData($updateDimensionData: UpdateDimensionInput!) {
  daUpdateDimension(updates: $updateDimensionData)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateDimensionData&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;dimensionName&quot;: &quot;scope&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;scopeName&quot;: &quot;Vendor Specific&quot;,
          &quot;scopeExternalId&quot;: &quot;externalId&quot;
        }
      },
      {
        &quot;dimensionName&quot;: &quot;template&quot;,
        &quot;columnsToUpdate&quot;: {
          &quot;templateName&quot;: &quot;WBA Template 1&quot;,
          &quot;templateExternalId&quot;: &quot;externalId&quot;
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Update Mutation</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_alerts_summary_data" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_alerts_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;opstudy&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">fetch_alerts_summary_data</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;opstudy&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Any variables passed to this script come from ${filePath}productData.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dim_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..uniqueID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### ID Not Found... ###</stringProp>
              <stringProp name="TestPlan.comments">Extracted ID is passed to Response Assertion Validation</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="639168980">${dim_id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Provided ID does not match Response ID ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">dimLevelsId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to pull updated measures" enabled="false">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">select
measure_aggregation_id,
measure_aggregation_column_name,
measure_aggregation_type,
measure_id
from dev_da2_dataset4.measure_aggregations
where measure_aggregation_column_name in (&apos;${measureAggregationColumnName_UPDATE}&apos;, &apos;${measureAggregationColumnName_UPDATE_2}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">measure_aggregation_id, measure_aggregation_column_name, measure_aggregation_type, measure_id</stringProp>
            <stringProp name="TestPlan.comments">Validate if newly created value was removed successfully</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Measure_1 Was Successfully Updated" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="314404577">${measureAggregationColumnName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data Was Not UPDATED OR There Is Nothing To UPDATE ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Measure_2 Was Successfully Updated" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1495060622">${measureAggregationColumnName_2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Expected Data Was Not UPDATED OR There Is Nothing To UPDATE ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">measure_aggregation_column_name_2</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;3&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;templateId&quot;: &quot;6&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Any variables passed to this script come from ${filePath}productCategories.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Code is not 200... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">dimLevelsId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to validate filtered id matches the id in DB" enabled="false">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">WITH t AS (
SELECT
    product_dim_xref.opstudy_id AS opstudy_id,
    (COUNT (DISTINCT alert_fact.location_id)) AS count_stores,
    (COUNT (DISTINCT alert_fact.product_id)) AS count_items,
    SUM(crr_accmlt_frcst) AS sum_crr_accmlt_frcst,
    SUM(accmlt_sls_lag3) AS sum_accmlt_sls_lag3,
    SUM(accmlt_sls_lag3_ly) AS sum_accmlt_sls_lag3_ly,
    SUM(prv_accmlt_frcst) AS sum_prv_accmlt_frcst,
    SUM(accmlt_abse_lag3) AS sum_accmlt_abse_lag3,
    SUM(accmlt_se_lag3) AS sum_accmlt_se_lag3,
    SUM(ssis_ratio) AS sum_ssis_x_sales,
    SUM(fva_err) AS sum_fva_err,
    SUM(fva_accmlt_sls) AS sum_fva_accmlt_sls,
    ( COUNT( if( alert_fact.alert_status_name = &apos;Not started&apos;, 1, NULL ) ) ) AS count_not_started,
    ( COUNT( if( alert_fact.alert_status_name = &apos;In progress&apos;, 1, NULL ) ) ) AS count_in_progress,
    ( COUNT( if(alert_fact.alert_status_name = &apos;Completed&apos;, 1, NULL) ) ) AS count_completed,
    ((COUNT(1))) AS count_alerts
FROM
    dev_da2_dataset4.alert_fact,
    dev_da2_dataset4.product_dim_xref
WHERE
    alert_fact.product_id = product_dim_xref.product_id
    AND product_dim_xref.opstudy_id IN (&apos;${product_id}&apos;)
    and alert_fact.alert_type_id IN (&apos;${dimColNameId}&apos;)
GROUP BY
    product_dim_xref.opstudy_id )
SELECT
    t.opstudy_id AS opstudy_id,
    &apos;opstudy&apos;,
    opstudy_dim_desc.opstudy_name AS opstudy_name,
    opstudy_dim_desc.opstudy_description AS opstudy_description,
    opstudy_dim_desc.opstudy_external_id AS opstudy_external_id,
    count_stores,
    count_items,
    ( abs( (sum_crr_accmlt_frcst - sum_prv_accmlt_frcst) / sum_prv_accmlt_frcst ) ) AS stability_alerts,
    (sum_ssis_x_sales / sum_accmlt_sls_lag3) AS agg_ssis_ratio,
    (sum_accmlt_se_lag3 * 100 / sum_accmlt_sls_lag3) AS bias,
    (sum_fva_err * 100 / sum_fva_accmlt_sls) AS sum_fva,
    (sum_accmlt_abse_lag3 * 100 / sum_accmlt_sls_lag3) AS mape,
    sum_crr_accmlt_frcst,
    sum_accmlt_sls_lag3,
    sum_accmlt_sls_lag3_ly,
    ( ( CASE
        WHEN count_not_started = count_alerts THEN &apos;Not started&apos;
        WHEN count_completed = count_alerts THEN &apos;Completed&apos;
        WHEN count_in_progress &lt;= count_alerts THEN &apos;In progress&apos;
    END ) ) AS alert_status,
    Count(1) over() as totalCount
FROM
    t,
    dev_da2_dataset4.opstudy_dim_desc
WHERE
    t.opstudy_id = opstudy_dim_desc.opstudy_id
GROUP BY
    t.opstudy_id,
    opstudy_name,
    opstudy_description,
    opstudy_external_id,
    sum_prv_accmlt_frcst,
    sum_accmlt_abse_lag3,
    sum_accmlt_se_lag3,
    sum_ssis_x_sales,
    sum_fva_err,
    sum_fva_accmlt_sls,
    sum_crr_accmlt_frcst,
    sum_accmlt_sls_lag3,
    sum_accmlt_sls_lag3_ly,
    count_stores,
    count_items,
    count_not_started,
    count_in_progress,
    count_completed,
    count_alerts
ORDER BY
    opstudy_id
LIMIT 10 OFFSET 0</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">opstudy_id,opstudy,opstudy_name,opstudy_description,opstudy_external_id,count_stores,count_items,stability_alerts,agg_ssis_ratio,bias,sum_fva,mape,sum_crr_accmlt_frcst,sum_accmlt_sls_lag3,sum_accmlt_sls_lag3_ly,alert_status,totalCount</stringProp>
            <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}productData.csv file and JSON extractor of fetch_alerts_summary_data script. If variable is changed in the file or script it will change the value for ALL scripts that are using them.</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate if passed ID matches Response Data&apos;s ID" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2023535230">${dimLevelsId}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message">### Expected Data Was Not Created ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">opstudy_id_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addMultipleDimensionWithDimensionLevel" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;,
            &quot;level_three&quot;
          ]
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_2}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;l_one&quot;,
            &quot;l_two&quot;,
            &quot;l_three&quot;
          ]
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;,
            &quot;level_three&quot;
          ]
        }
      },
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_2}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;l_one&quot;,
            &quot;l_two&quot;,
            &quot;l_three&quot;
          ]
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create multiple dimension with dimension levels
</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to validate week count" enabled="false">
            <stringProp name="dataSource">connection</stringProp>
            <stringProp name="query">with t_data as (
SELECT time_dim_xref.time_id AS time_id,
SUM(st_ty) AS sum_st_ty,
SUM(st_ly) AS sum_st_ly,
SUM(st_total_fcst) AS sum_st_total_fcst,
SUM(st_base_fcst) AS sum_st_base_fcst,
SUM(st_driver_fcst) AS sum_st_driver_fcst,
(sum(IF(fo.st_base_override IS NULL, fd.st_base_fcst,fo.st_base_override) + IF(fo.st_trade_promotions_override IS NULL,
IF(fd.st_driver_fcst IS NULL, 0, fd.st_driver_fcst),
fo.st_trade_promotions_override))) AS st_final_plan,
SUM(st_base_override) AS sum_st_base_override,
SUM(st_trade_promotions_override) AS sum_st_trade_promotions_override,
(COUNT(*)) AS row_count
FROM dev_da2_dataset4.fact_data fd
LEFT JOIN dev_da2_dataset4.fact_override fo ON fo.product_id = fd.product_id
and fo.location_id = fd.location_id
and fo.time_id = fd.time_id
and fo.version_id = fd.version_id, dev_da2_dataset4.time_dim_xref, dev_da2_dataset4.product_dim_xref
WHERE fd.product_id = product_dim_xref.product_id
AND fd.time_id = time_dim_xref.time_id
AND product_dim_xref.prod_cat_id IN (&apos;${product_category_id}&apos;)
and fd.alert_type_id IN (&apos;${alert_type_value}&apos;)
and time_dim_xref.${week_range}_id IN (&apos;1&apos;)
GROUP BY time_dim_xref.time_id)
SELECT 
t.time_id AS time_id,
&apos;time&apos;,
tdd.time_name AS time_name,
tdd.time_description AS time_description,
tdd.time_external_id AS time_external_id,
sum_st_ty,
sum_st_ly,
(((sum_st_ty - sum_st_ly) / sum_st_ty) * 100) AS st_yoy_perc_change,
sum_st_total_fcst,
sum_st_base_fcst,
sum_st_driver_fcst,
st_final_plan,
sum_st_base_override,
sum_st_trade_promotions_override,
row_count,
Count(1) over() as totalCount 
FROM t_data t, dev_da2_dataset4.time_dim_desc tdd
WHERE t.time_id = tdd.time_id
GROUP BY t.time_id, time_name, time_description, time_external_id, sum_st_ty, sum_st_ly, sum_st_total_fcst, sum_st_base_fcst, sum_st_driver_fcst, sum_st_base_override, sum_st_trade_promotions_override, st_final_plan, row_count
ORDER BY 
	time_id 
LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">time_id,time,time_name,time_description,time_external_id,sum_st_ty,sum_st_ly,st_yoy_perc_change,sum_st_total_fcst,sum_st_base_fcst,sum_st_driver_fcst,st_final_plan,sum_st_base_override,sum_st_trade_promotions_override,row_count,totalCount</stringProp>
            <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}productCategories.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate if week&apos;s count matches the Response Body&apos;s week&apos;s count." enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1244146216">${week_count_matchNr}</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
              <stringProp name="Assertion.custom_message">### Week count not available... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">totalCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getFileConfigFalse" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFileConfig&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;branchName&quot;: &quot;a-vanilla-test&quot;,
    &quot;filePath&quot;: &quot;ui/config/DPi18n.json&quot;
  }
},&quot;query&quot;:&quot;query getFileConfig($input: GetConfigFileInput) {\n  getConfigFile(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getFileConfig</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getFileConfig($input: GetConfigFileInput) {
  getConfigFile(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;branchName&quot;: &quot;a-vanilla-test&quot;,
    &quot;filePath&quot;: &quot;ui/config/DPi18n.json&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-593466385">Vanilla Dashboard</stringProp>
                <stringProp name="-868675437">Revenue Risk</stringProp>
                <stringProp name="878276007">Successfully deleted the filter.</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Body Does Not Match ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch__weekly_summary_data" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_weekly_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 100,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_weekly_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">fetch_weekly_summary_data</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query fetch_weekly_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;fact_data&quot;,
      &quot;fact_override&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 100,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;time&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_st_ly&quot;,
      &quot;st_yoy_perc_change&quot;,
      &quot;sum_st_total_fcst&quot;,
      &quot;sum_st_base_fcst&quot;,
      &quot;sum_st_driver_fcst&quot;,
      &quot;st_final_plan&quot;,
      &quot;sum_st_base_override&quot;,
      &quot;sum_st_trade_promotions_override&quot;,
      &quot;row_count&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;prod_cat&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${product_category_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${alert_type_value}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${week_range}&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;1&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">week_count</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..uniqueID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">### Week Count Not Found... ###</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Code is not 200... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateAdditionalDetailsForDimensionAndDimensionLevel" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;
          ],
          &quot;additionalcolumnsToAddInDimensionLevel&quot;: {
            &quot;isAttribute&quot;: 1,
            &quot;factTable&quot;: &quot;fact_data&quot;,
            &quot;manytomanyTable&quot;: &quot;season_data&quot;,
            &quot;manytomanyTableColumns&quot;: &quot;product_id, location_id, time_id&quot;
          }
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION_LEVEL&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_1}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;
          ],
          &quot;additionalcolumnsToAddInDimensionLevel&quot;: {
            &quot;isAttribute&quot;: 1,
            &quot;factTable&quot;: &quot;fact_data&quot;,
            &quot;manytomanyTable&quot;: &quot;season_data&quot;,
            &quot;manytomanyTableColumns&quot;: &quot;product_id, location_id, time_id&quot;
          }
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create dimension and dimension levels with additional details if required</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addOneDimensionWithDimensionLevel" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;addDimensionAndDimensionLevel&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_3}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;,
            &quot;level_three&quot;
          ]
        }
      }
    ]
  }
},&quot;query&quot;:&quot;mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {\n  daInsertData(input: $input)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">addDimensionAndDimensionLevel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation addDimensionAndDimensionLevel($input: InsertDataInput!) {
  daInsertData(input: $input)
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;branchID&quot;: 0,
    &quot;changes&quot;: [
      {
        &quot;datatable&quot;: [
          &quot;dimensions&quot;,
          &quot;dimension_levels&quot;
        ],
        &quot;type&quot;: &quot;DIMENSION&quot;,
        &quot;dimensionAndDiemsionLevelData&quot;: {
          &quot;dimension&quot;: &quot;${dimension_3}&quot;,
          &quot;dimensionLevel&quot;: [
            &quot;${dimensionLevel_1}&quot;,
            &quot;level_two&quot;,
            &quot;level_three&quot;
          ]
        }
      }
    ]
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Create one dimension with dimension levels</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="daUpdateDataSameTable" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;daUpdateDataSameTable&quot;,&quot;variables&quot;:{
  &quot;changes&quot;: [
    {
      &quot;datatable&quot;: &quot;alert_fact&quot;,
      &quot;scope&quot;: {
        &quot;dimensionFilters&quot;: [
          {
            &quot;dimensionColumnName&quot;: &quot;product&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;product&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;30000276&quot;,&quot;30000277&quot;
                ]
              }
            ]
          },
          {
            &quot;dimensionColumnName&quot;: &quot;location&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;location&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;60000001&quot;
                ]
              }
            ]
          },
          {
            &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;1&quot;
                ]
              }
            ]
          }
        ]
      },
      &quot;workbookID&quot;: 6,
      &quot;valuesToBeUpdated&quot;: [{&quot;alert_status_id&quot;:1, &quot;alert_status_name&quot;: &quot;Not Started&quot; }]
    }
  ]
},&quot;query&quot;:&quot;mutation daUpdateDataSameTable($changes: [UpdateSameTableInput!]!) {\n  daUpdateDataSameTable(updates: { datasetID: 2, branchID: 0, valueUpdation: $changes })\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">daUpdateDataSameTable</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation daUpdateDataSameTable($changes: [UpdateSameTableInput!]!) {
  daUpdateDataSameTable(updates: { datasetID: 2, branchID: 0, valueUpdation: $changes })
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;changes&quot;: [
    {
      &quot;datatable&quot;: &quot;alert_fact&quot;,
      &quot;scope&quot;: {
        &quot;dimensionFilters&quot;: [
          {
            &quot;dimensionColumnName&quot;: &quot;product&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;product&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;30000276&quot;,&quot;30000277&quot;
                ]
              }
            ]
          },
          {
            &quot;dimensionColumnName&quot;: &quot;location&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;location&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;60000001&quot;
                ]
              }
            ]
          },
          {
            &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
            &quot;and&quot;: [
              {
                &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
                &quot;cmpOperator&quot;: &quot;IN&quot;,
                &quot;values&quot;: [
                  &quot;1&quot;
                ]
              }
            ]
          }
        ]
      },
      &quot;workbookID&quot;: 6,
      &quot;valuesToBeUpdated&quot;: [{&quot;alert_status_id&quot;:1, &quot;alert_status_name&quot;: &quot;Not Started&quot; }]
    }
  ]
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_alerts_summary_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;opstudy&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimColNameId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">fetch_alerts_summary_data</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query fetch_alerts_summary_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: 4,
    &quot;datatable&quot;: [
      &quot;alert_fact&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;6&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;count_stores&quot;,
      &quot;count_items&quot;,
      &quot;stability_alerts&quot;,
      &quot;agg_ssis_ratio&quot;,
      &quot;bias&quot;,
      &quot;sum_fva&quot;,
      &quot;mape&quot;,
      &quot;sum_crr_accmlt_frcst&quot;,
      &quot;sum_accmlt_sls_lag3&quot;,
      &quot;sum_accmlt_sls_lag3_ly&quot;,
      &quot;alert_status&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;product&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;opstudy&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimLevelsId}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;alert_type&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;alert_type&quot;,
              &quot;cmpOperator&quot;: &quot;IN&quot;,
              &quot;values&quot;: [
                &quot;${dimColNameId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;6&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Any variables passed to this script come from ${filePath}productData.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">### Response Code is not 200... ###</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">dimLevelsId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${filePath}api_results\DP_antuit-results_${__time(dd-MM-yyyy HH-mm-ss,currentDate)}.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${filePath}api_results\DP_Consolidated_report.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Allocation-QA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">connection</stringProp>
          <stringProp name="dbUrl">jdbc:mariadb://singlestore-dev.espdev.antuits.com:3306</stringProp>
          <stringProp name="driver">org.mariadb.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">9zJ8TkFCCW8wb75Y</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUsername}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value">${access_token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">espusertoken</stringProp>
              <stringProp name="Header.value">${esp_user_token}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Header Manager is used to pass certain information to our API test such as Token, UserName/Password, Content-Type, etc (content-type is neccessary) or pass info from user_defined_variables</stringProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${filePath}userData.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">scenario_#,access_token,esp_user_token,measureColumnName, measureAggregationColumnName,measureAggregationType, measureColumnName_2, measureAggregationColumnName_2, measureAggregationType_2, measureAggregationColumnName_UPDATE, measureColumnName_UPDATE, measureAggregationColumnName_UPDATE_2, measureColumnName_UPDATE_2</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${filePath}Dimensions.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dimension_1, dimension_2, dimension_3, dimensionLevel_1, dimensionId_1</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass dimension data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="filterData" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;filterData&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;capability&quot;: &quot;FILTER&quot;,
    &quot;dimensionName&quot;: &quot;dc&quot;,
    &quot;dimensionLevelName&quot;: &quot;dc&quot;,
    &quot;first&quot;: 30,
    &quot;searchColumn&quot;: &quot;dc_name&quot;,
    &quot;searchOperator&quot;: &quot;like&quot;
  }
},&quot;query&quot;:&quot;query filterData($input: ALLOCDimensionQueryInput) {\n  alloc {\n    getDimensionLevelValues(input: $input) {\n      edges {\n        node {\n          dimensionMembers {\n            id\n            name\n            externalID\n            description\n            __typename\n          }\n          __typename\n        }\n        cursor\n        __typename\n      }\n      pageInfo {\n        totalRows\n        hasNextPage\n        __typename\n      }\n      error\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">filterData</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query filterData($input: ALLOCDimensionQueryInput) {
  alloc {
    getDimensionLevelValues(input: $input) {
      edges {
        node {
          dimensionMembers {
            id
            name
            externalID
            description
            __typename
          }
          __typename
        }
        cursor
        __typename
      }
      pageInfo {
        totalRows
        hasNextPage
        __typename
      }
      error
      __typename
    }
    __typename
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;capability&quot;: &quot;FILTER&quot;,
    &quot;dimensionName&quot;: &quot;dc&quot;,
    &quot;dimensionLevelName&quot;: &quot;dc&quot;,
    &quot;first&quot;: 30,
    &quot;searchColumn&quot;: &quot;dc_name&quot;,
    &quot;searchOperator&quot;: &quot;like&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.data.daInsertData</stringProp>
            <stringProp name="EXPECTED_VALUE">Success</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getGridData" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getGridData&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;first&quot;: 10,
    &quot;after&quot;: 0,
    &quot;capability&quot;: &quot;String&quot;,
    &quot;dimensionLevelNames&quot;: [
      &quot;state&quot;
    ],
    &quot;apiQuery&quot;: &quot;storeGroupLocations&quot;,
    &quot;datatables&quot;: [&quot;allocation_data&quot;],
    &quot;measures&quot;: [
      &quot;sum_actual_sales&quot;,
      &quot;sum_forecast_sales&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [{
        &quot;name&quot;: &quot;city&quot;,
        &quot;operator&quot;: &quot;IN&quot;,
        &quot;ids&quot;: [3,122,241,109,66]
      }],
      &quot;measureFilters&quot;: {
        &quot;rangeFilters&quot;: [{
          &quot;name&quot;: &quot;actual_sales&quot;,
          &quot;min&quot;: 1,
          &quot;max&quot;: 100
        }]
      }
    },
    &quot;sortingColumns&quot;: [{
      &quot;columnName&quot;: &quot;state_id&quot;, 
      &quot;isAscending&quot;: false
    }],
    &quot;selectionScope&quot;: { 
      &quot;name&quot;: &quot;alloc_project_id&quot;, 
      &quot;relationalOperator&quot;: &quot;IN&quot;, 
      &quot;values&quot;: [1648633502326]
    }
  }
},&quot;query&quot;:&quot;query getGridData($input: ALLOCQueryInput) {\n  alloc {\n    allocDataQuery(input: $input) {\n      pageInfo {\n        totalRows\n        hasNextPage\n      }\n      edges {\n        cursor\n        node {\n          dimensionMembers{\n            id\n            dimensionLevelColumnName\n            description\n            name\n          }\n          measureValues\n        }\n      }\n      error\n      succeed\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">getGridData</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getGridData($input: ALLOCQueryInput) {
  alloc {
    allocDataQuery(input: $input) {
      pageInfo {
        totalRows
        hasNextPage
      }
      edges {
        cursor
        node {
          dimensionMembers{
            id
            dimensionLevelColumnName
            description
            name
          }
          measureValues
        }
      }
      error
      succeed
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;first&quot;: 10,
    &quot;after&quot;: 0,
    &quot;capability&quot;: &quot;String&quot;,
    &quot;dimensionLevelNames&quot;: [
      &quot;state&quot;
    ],
    &quot;apiQuery&quot;: &quot;storeGroupLocations&quot;,
    &quot;datatables&quot;: [&quot;allocation_data&quot;],
    &quot;measures&quot;: [
      &quot;sum_actual_sales&quot;,
      &quot;sum_forecast_sales&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [{
        &quot;name&quot;: &quot;city&quot;,
        &quot;operator&quot;: &quot;IN&quot;,
        &quot;ids&quot;: [3,122,241,109,66]
      }],
      &quot;measureFilters&quot;: {
        &quot;rangeFilters&quot;: [{
          &quot;name&quot;: &quot;actual_sales&quot;,
          &quot;min&quot;: 1,
          &quot;max&quot;: 100
        }]
      }
    },
    &quot;sortingColumns&quot;: [{
      &quot;columnName&quot;: &quot;state_id&quot;, 
      &quot;isAscending&quot;: false
    }],
    &quot;selectionScope&quot;: { 
      &quot;name&quot;: &quot;alloc_project_id&quot;, 
      &quot;relationalOperator&quot;: &quot;IN&quot;, 
      &quot;values&quot;: [1648633502326]
    }
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.data.daInsertData</stringProp>
            <stringProp name="EXPECTED_VALUE">Success</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to pull newly added measures" enabled="false">
          <stringProp name="dataSource">connection</stringProp>
          <stringProp name="query">select
measure_aggregation_id,
measure_aggregation_column_name,
measure_aggregation_type,
measure_id
from dev_da2_dataset4.measure_aggregations
where measure_aggregation_column_name in (&apos;${measureAggregationColumnName}&apos;, &apos;${measureAggregationColumnName_2}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">measure_aggregation_id, measure_aggregation_column_name, measure_aggregation_type, measure_id</stringProp>
          <stringProp name="TestPlan.comments">We are validating if created data is in the database</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate New Measure_1 Was Successfully Added" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="314404577">${measureAggregationColumnName}</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
            <stringProp name="Assertion.custom_message">### Expected Data Was Not Created ###</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">measure_aggregation_column_name_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate New Measure_2 Was Successfully Added" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1495060622">${measureAggregationColumnName_2}</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">validate if created value matches/exist the value in the database</stringProp>
            <stringProp name="Assertion.custom_message">### Expected Data Was Not Created ###</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">measure_aggregation_column_name_2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">b2c.espdev.antuits.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">https://b2c.espdev.antuits.com/dp/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
